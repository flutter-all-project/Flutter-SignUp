// Gradle 配置：https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration

/**
 * 模块级构建文件
 * 模块级 build.gradle 文件位于每个 <project>/<module>/ 目录，用于配置适用于其所在模块的构建设置。
 * 通过配置这些构建设置来提供自定义打包选项（例如附加构建类型和产品风味），以及替换 main/ 应用清单或顶级 build.gradle 文件中的设置
 */

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


// 获取渠道参数使用,这里设置一下默认值
def dartEnvironmentVariables = [
        CHANNEL: 'YYB',
        ENV    : 'dev',
]

// 获取命令行参数脚本
if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                // 1.22.6 版本
                // def pair = URLDecoder.decode(entry).split('=')
                // 2.2 版本
                // def pair = URLDecoder.decode(entry).split('=')
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }
}

def getDateTime() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd_HH-mm-ss')
    return formattedDate
}


apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// android {} 中配置构建Android APP所需的特定编译选项。
android {
    // * 打包APK时修改文件名带上渠道参数,还有一些SDK也可以通过这种方式设置参数
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "release") {
                // 获取版本
                def versionName = variant.versionName
                def versionCode = variant.versionCode
                def applicationId = variant.applicationId
                println(applicationId)
                // 设置新名称
                def newApkName = "app_env_${dartEnvironmentVariables.ENV}_date_${getDateTime()}_name_${defaultConfig.versionName}_v${defaultConfig.versionCode}_channel_${dartEnvironmentVariables.CHANNEL}.apk"
                outputFileName = new File(newApkName)
            }
        }
    }


    // buildToolsVersion：指定Gradle编译APP时所使用的SDK编译工具、命令行工具和编译器的版本、我们需要通过SDK Manager去下载使用到的编译工具。

    // compileSdkVersion：指定Gradle编译APP时所使用的Android API的版本，这意味着我们的APP只能使用该版本及其以下版本中的API。
    // compileSdkVersion flutter.compileSdkVersion
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    /**
     * defaultConfig默认配置和配置编译变体的入口,
     * 还可以在这里动态的覆盖main/AndroidManifest.xml的属性。
     * 在这个区块还可以设置产品风味，给不同的风味版本配置不同的属性值。
     * */
    defaultConfig {
        // *: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        // applicationId APP发布安装时的唯一标识，但是在代码中引用的包名依然是在main/AndroidManifest.xml文件中属性package设置的名称。
        applicationId "com.example.flutter_sign_in"
        // 指定应用程序设计运行的最低 API 级别，打包闪退就修改最小 SDK 版本
        // minSdkVersion flutter.minSdkVersion
        minSdkVersion 21
        // 指定应用程序设计运行的目标 API 级别
        // targetSdkVersion flutter.targetSdkVersion
        targetSdkVersion 33
        // 定义APP的版本号, 用作内部版本号的正整数。此数字仅用于确定一个版本是否比另一个版本更新，数字越大表示版本越新。此版本不向用户显示。
        versionCode flutterVersionCode.toInteger()
        // 定义APP的版本名, 用作向用户显示的版本号的字符串。此设置可以指定为原始字符串或对字符串资源的引用。
        versionName flutterVersionName
    }

    /**
     * buildTypes区块中配置多个编译类型。编译系统默认定义了两个类型：debug and release.。
     * debug类型：默认的配置文件中没有展示出来，它包含了debug工具，使用debug key签名APK。
     * release类型：使用Proguard设置，默认不签名APK。
     */
    buildTypes {
        // Android Studio默认配置release编译类型开启代码缩减和指定代码混淆文件。
        release {
            // *: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug


            // minifyEnabled false // 资源压缩设置
            // useProguard true // 代码压缩设置

            // 配置打包的架构
            ndk {
                //之前看QQ微信等大佬都只用"armeabi",手机没什么x86框架的,只包含arm32和arm64即可
                abiFilters "armeabi", "armeabi-v7a", "arm64-v8a","x86"
            }
        }

        // 配置调试版本时候的包的架构
        debug {
            ndk {
                // 这里配置开发调试时的，根据个人需要增减少，x86建议加上不然部分模拟器会报错(x86_64,x86是兼容模拟器的)
                // abiFilters "armeabi","armeabi-v7a","arm64-v8a","x86_64","x86"
                abiFilters "x86_64","arm64-v8a","x86"   // 暂时使用真机调试和模拟器的so
            }
        }
    }

    // split-per-abi 命令需要 split-per-abi 命令 和 abi配置 与 ndk 配置冲突
    // splits {
    //     abi {
    //         reset()//重置 ABI 列表为只包含一个空字符串（与 include 一起使用可以表示要使用哪一个 ABI，而不是要 exclude 哪些 ABI）
    //         enable true // 设为true，才能启用ABI拆分机制在打包时根据架构生成不同的apk文件
    //         universalApk false  // If true, 构建支持所有平台abi类型，构建一个包，包含多个架构的so(只要代码中有的都会打进去)
    //         include "armeabi","armeabi-v7a","arm64-v8a" // 设置所有要支持的abi类型，构建多个包，每个包只包含一个架构的so
    //         exclude "x86"   // 设置所有不要支持的abi类型
    //     }
    // }
}

flutter {
    source '../..'
}

// dependencies代码块中指定本模块中所需要的依赖
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}


